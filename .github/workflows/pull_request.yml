name: pull_request

on:
  # 新增push事件触发器
  push:
    branches:
      - master
      - 'release-**'
  # 保留原有PR触发器  
  pull_request:
    types: [synchronize, reopened, labeled]
    branches:
      - master
      - 'release-**'

concurrency:
  # 适配两种事件类型的并发组
  group: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: lint
    # 修改条件适配两种触发方式
    if: |
      (github.event_name == 'push') ||
      (contains(github.event.pull_request.labels.*.name, 'ready-for-testing') &&
       github.event.pull_request.merged != true)
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          # 动态引用基准commit
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.sha~1 }}
      # 其余lint步骤保持不变...

  build:
    name: build
    needs: lint
    runs-on: [self-hosted, nebula, linux]
    # 环境矩阵完全保留
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: centos7
            compiler: gcc-9.3
            required: true
          - os: ubuntu2004
            compiler: gcc-9.3
            required: false
          - os: ubuntu2004
            compiler: clang-10 
            required: false
    env:
      CCACHE_DIR: /tmp/ccache/nebula/${{ matrix.os }}-${{ matrix.compiler }}
      CCACHE_MAXSIZE: 8G

    steps:
      - uses: webiny/action-post-run@3.1.0
        with:
          run: sh -c "find . -mindepth 1 -delete"
      - uses: actions/checkout@v4
      - name: Prepare Env
        run: |
          [ -d build/ ] && rm -rf build/* || mkdir -p build
          make init -C tests

      # Build steps remain unchanged
      - name: CMake
        run: |
          case ${{ matrix.compiler }} in
          gcc-*)
            cmake \
              -DCMAKE_CXX_COMPILER=$TOOLSET_GCC_DIR/bin/g++ \
              -DCMAKE_C_COMPILER=$TOOLSET_GCC_DIR/bin/gcc \
              -DNEBULA_USE_LINKER=mold \
              -DCMAKE_BUILD_TYPE=${{ matrix.os == 'centos7' && 'Release' || 'Debug' }} \
              -DENABLE_TESTING=on \
              -GNinja -B build
            ;;
          clang-*)
            cmake \
              -DCMAKE_CXX_COMPILER=$TOOLSET_CLANG_DIR/bin/clang++ \
              -DCMAKE_C_COMPILER=$TOOLSET_CLANG_DIR/bin/clang \
              -DNEBULA_USE_LINKER=mold \
              -DCMAKE_BUILD_TYPE=RelWithDebInfo \
              -DENABLE_ASAN=on \
              -GNinja -B build
            ;;
          esac

      - name: Build
        run: |
          ccache -z
          ninja -j $(nproc)
          ccache -s
        working-directory: build/

      # Test execution with conditional error handling
      - name: Run CTest
        env:
          ASAN_OPTIONS: fast_unwind_on_malloc=1
        run: |
          ctest -j $(($(nproc)/2+1)) --timeout 400 --output-on-failure
        working-directory: build/
        continue-on-error: ${{ !matrix.required }}

      - name: Cluster Setup
        run: |
          make CONTAINERIZED=true ENABLE_FT_INDEX=true ES_ADDRESS='"elasticsearch":9200' up
        working-directory: tests/
        timeout-minutes: 4
        continue-on-error: ${{ !matrix.required }}

      - name: Execute Pytest
        run: make RM_DIR=false DEBUG=false J=8 test
        working-directory: tests/
        continue-on-error: ${{ !matrix.required }}

      - name: Run TCK Tests
        run: |
          make RM_DIR=false DEBUG=false ENABLE_FT_INDEX=true ES_ADDRESS='"elasticsearch":9200' J=8 tck
        working-directory: tests/
        continue-on-error: ${{ !matrix.required }}

      - name: LDBC Benchmark
        run: make RM_DIR=false DEBUG=false J=8 ldbc
        working-directory: tests/
        continue-on-error: ${{ !matrix.required }}

      # Mandatory environment validation
      - name: Validate Required
        if: ${{ always() && matrix.required }}
        run: |
          if [ "${{ job.status }}" != 'success' ]; then
            echo "::error::Mandatory environment tests failed"
            exit 1
          fi

      # Existing coverage and log steps
      - name: Code Coverage
        if: ${{ matrix.compiler == 'gcc-9.3' && matrix.os == 'ubuntu2004' }}
        run: |
          ~/.local/bin/fastcov -d build -l -o fastcov.info -p --exclude /usr/include /usr/lib /opt/vesoft build/ tests/ /test /mock .lex .yy
      - uses: codecov/codecov-action@v3
        if: ${{ matrix.compiler == 'gcc-9.3' && matrix.os == 'ubuntu2004' }}
        with:
          files: fastcov.info
          fail_ci_if_error: false

      - name: Check Sanitizer
        if: ${{ always() }}
        run: |
          exit $(grep -P "SUMMARY: AddressSanitizer: \d+ byte$s$ leaked in \d+ allocation$s$\." build/server_*/logs/*stderr.log | wc -l)

      - name: Archive Logs
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ${{ matrix.os }}-${{ matrix.compiler }}-logs
          path: ./build/server_*/logs/
